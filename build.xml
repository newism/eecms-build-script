<?xml version="1.0"?>
<project name="Newism ExpressionEngine 2 Build" default="build" basedir="../"> <!-- one back since we're in build/ -->

	<!-- Load in Ant-Contrib to give us access to some very useful tasks! -->
    <!-- the .jar file is located in the tools directory -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/build/tools/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- load shell environment -->
    <property environment="ENV" />
    
	<!-- load property files -->
    <property file="build/config/project.properties"/>

	<!-- Build this mofo -->
    <target name="build">
    <if>
        <equals arg1="${env}" arg2="dev"/>
        <then>
            <!-- Build a dev environment -->
            <echo message="Building a Development Environment..."/>
            <antcall target="-build.dev" />
        </then>

        <elseif>
            <equals arg1="${env}" arg2="test"/>
            <then>
                <!-- Build a test environment -->
                <echo message="Building a Test Environment..."/>
                <antcall target="-build.test" />
            </then>
        </elseif>

        <else>
            <!-- Build a production environment -->
            <echo message="Building a Production Environment..."/>
            <antcall target="-build.production" />
        </else>
    </if>
    </target>

    <!-- Target: build -->
    <target name="-build.dev"
            depends="-rev,
                     -clean,
                     -compile_compass,
                     -copy,
                     -usemin,
                     -css,
                     -imagespng,
 					 -imagesjpg "/>

    <target name="-build.test"
            depends="-rev,
                     -clean,
                     -compile_compass,
                     -copy,
                     -usemin,
                     -css,
                     -imagespng,
 					 -imagesjpg "/>

    <target name="-build.production"
            depends="-rev,
                     -clean,
                     -compile_compass,
                     -copy,
                     -usemin,
                     -css,
                     -imagespng,
 					 -imagesjpg,
					 -git_commit" />

    <!--
    *************************************************
    * FUNCTION TARGETS                              *
    *************************************************
    -->
    <target name="-load-build-info" description="(PRIVATE) Loads the build versioning information">
        <property file="./${dir.build}/config/${build.version.info}"/>
    </target>

    <target name="current-number" depends="-load-build-info" description="(PUBLIC) Returns the current build number">
        <echo>Current build number: ${build.number}</echo>
    </target>

    <target name="-rev" description="(PRIVATE) Increase the current build number by one and set build date">
    <!-- This is a private target -->
    
        <echo message="====================================================================="/>
        <echo message="Welcome to the Newism ExpressionEngine 2 build script!"/>
        <echo message=" "/>
        <echo message="We're going to get your site all ship-shape and ready for prime time."/>
        <echo message=" "/>
        <echo message="This should take somewhere between 15 seconds and a few minutes,"/>
        <echo message="mostly depending on how many images we're going to compress."/>
        <echo message=" "/>
        <echo message="Feel free to come back or stay here and follow along."/>
        <echo message="====================================================================="/>
        <echo message=" "/>
        <echo message=" "/>
    
    
        <echo message="Increasing the build number..."/>
        <propertyfile file="./${dir.build}/config/${build.version.info}" comment="Build Information File - DO NOT CHANGE">
            <entry key="build.number" type="int" default="0000" operation="+" pattern="0000"/>
            <entry key="build.date" type="date" value="now" pattern="MM/dd/yyyy hh:mm aa"/>
        </propertyfile>
        <property file="./${dir.build}/config/${build.version.info}"/>
        <echo>Creating build ${build.number}</echo>
    </target>

    <target name="-clean" description="(PRIVATE) Wipe the previous build theme and template directories">
    <!-- This is a private target -->

        <echo message="Cleaning up previous build directory..."/>
        <delete dir="./${dir.theme_publish}/"/>
        <delete dir="./${dir.templates_publish}/"/>
    </target>

    <!-- Compile Compass -->
    <target name="-compile_compass" depends="-load-build-info" description="Compiles Compass">
	    <echo message="Compiling sass in ${dir.theme_src}" />
	    <echo message="Here's the output: "/>
		<exec executable="compass" dir="${dir.theme_src}" failonerror="true">
			<arg line="compile" />
		</exec>
	</target>

    <target name="-copy" depends="-load-build-info">
    <!-- This is a private target -->
    
        <echo message="Copying over new theme files..."/>
        <copy todir="./${dir.theme_publish}">
            <fileset dir="${dir.theme_src}/" excludes="config.rb, **/.sass-cache/**, **/sass-src/**" />
        </copy> 
        <echo message="A copy of all non-dev theme files are now in: ./${dir.theme_publish}."/>

        <echo message="Copying over new template files..."/>
        <copy todir="./${dir.templates_publish}">
            <fileset dir="${dir.templates_src}/" />
        </copy> 
        <echo message="A copy of all non-dev template files are now in: ./${dir.templates_publish}."/>

    </target>

    <!-- HTML -->
    <target name="-usemin" depends="-serverconfig" description="(PRIVATE) Replaces references to non-minified scripts">
        <echo message="Switching to minified js files..."/>

        <!-- switch from a regular jquery to minified -->
        <replaceregexp match="jquery-(\d|\d(\.\d)+)\.js" replace="jquery-\1.min.js" flags="g">
            <fileset dir="./${dir.templates_publish}" includes="${file.pages}"/>
        </replaceregexp>

        <!-- switch any google CDN reference to minified -->
        <replaceregexp match="(\d|\d(\.\d)+)\/jquery\.js" replace="\1/jquery.min.js" flags="g">
            <fileset dir="./${dir.templates_publish}" includes="${file.pages}"/>
        </replaceregexp>    

        <echo>Kill off those versioning flags: ?v=2</echo>
        <replaceregexp match='\?v=\d+">' replace='">' flags="g">
            <fileset dir="./${dir.templates_publish}" includes="${file.pages}"/>
        </replaceregexp>
        
        <echo>Remove favicon.ico reference if it is pointing to the root</echo>
        <replaceregexp match="&lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon\.ico&quot;&gt;" replace="">
            <fileset dir="./${dir.templates_publish}" includes="${file.pages}"/>
        </replaceregexp>
        <!-- we maintain the apple-touch-icon reference for Android 2.2   www.ravelrumba.com/blog/android-apple-touch-icon
        <replace token="&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;/apple-touch-icon.png&quot;>" value="">
            <fileset dir="./${dir.publish}" includes="${page-files}"/>
        </replace>
        -->
    </target>

    <target name="-serverconfig" description="(PRIVATE) Upgrades expires headers">
		<!--
			<echo message="Upgrading expires header timeouts for js/css to 1yr..."/>
			<replace file="./${dir.publish}/${file.serverconfig}" token="access plus 2 months" value="access plus 1 year"/>
		-->
    </target>


    <!-- CSS -->
    <target name="-css" depends="-load-build-info" description="Concatenates and Minifies any stylesheets listed in the file.stylesheets property">

        <echo message="Concatenating css..."/>
        <concat destfile="./${dir.theme_publish}/${dir.css}/style-${build.number}.css">
            <filelist dir="./${dir.theme_publish}/${dir.css}" files="${file.stylesheets}"/>
        </concat>
        
        <echo message="Kill off versioning flags: ?v=2" />
        <replaceregexp match='/(.+\.)([a-z]+)\?(\d+)' replace='\1\3.\2' flags="g">
            <fileset dir="./${dir.theme_publish}/${dir.css}" includes="${file.stylesheets}" />
        </replaceregexp>

        <echo message="Minifying css..."/>
        <apply executable="java" parallel="false">
            <fileset dir="./${dir.theme_publish}/${dir.css}/" includes="style-${build.number}.css"/>
            <arg line="-jar"/>
            <arg path="./${dir.build.tools}/${tool.yuicompressor}"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="style-${build.number}.css" to="../${dir.theme_publish}/${dir.css}/style-${build.number}.min.css"/>
            <targetfile/>
        </apply>
        
        <echo message="Updating the HTML with the new css filename"/>
        <replace token="style.css" value="style-${build.number}.min.css" dir="${dir.templates_publish}" includes="${file.pages}"/>
    </target>


    <!-- IMAGES -->
    <target name="-imagespng" description="(PRIVATE) Optimizes .png images using optipng">
        <echo message="Optimizing images..."/>
        <echo message="This part might take a while. But everything else is already done."/>
        <echo message=" "/>
        <echo message="First, we run optipng on the .png files..."/>
        
        <!-- osfamily=unix is actually true on OS X as well -->
        <!-- On *nix's and OS X, check for optipng and give a helpful message if it's not installed -->
        <if>
            <and>
                <os family="unix" />
                <available file="optipng" filepath="${ENV.PATH}" />
            </and>
            <then>
                <apply executable="optipng" osfamily="unix">
                    <arg value="-quiet"/>
                    <arg value="-o7"/>
                    <fileset dir="${dir.theme_publish}">
                        <include name="**/*.png"/>
                    </fileset>
                </apply>
            </then>
            <elseif>
                <os family="unix" />
                <then>
                    <echo message="*** optipng NOT INSTALLED. SKIPPING OPTIMIZATION OF PNGs." />
                    <echo message="*** Install optipng to enable png optimization." />
                    <echo message="*** For instructions see 'Dependencies' at: http://html5boilerplate.com/docs/#Build-script#dependencies" />
                </then>
            </elseif>
        </if>
    </target>


    <target name="-imagesjpg" description="(PRIVATE) Optimizes .jpg images using jpegtan">
        <echo message="Now, we clean up those jpgs..."/>
        <if>
            <equals arg1="${images.strip.metadata}" arg2="true"/>
            <then>
                <var name="strip-meta-tags" value="none"/>
            </then>
            <else>
                <var name="strip-meta-tags" value="all"/>
            </else>
        </if>

        <!-- On *nix's and OS X, check for jpegtran and give a helpful message if it's not installed -->
        <if>
            <and>
                <os family="unix" />
                <available file="jpegtran" filepath="${ENV.PATH}" />
            </and>
            <then>
                <apply executable="jpegtran" dest="./${dir.theme_publish}/" osfamily="unix">
                    <fileset dir="./${dir.theme_publish}/" includes="**/*.jpg, **/*.jpeg" excludes="${images.bypass}"/>
                    <arg value="-copy"/>
                    <arg value="${strip-meta-tags}"/>
                    <arg value="-optimize"/>
                    <arg value="-outfile"/>
                    <targetfile/>
                    <srcfile/>
                    <mapper type="identity"/>
                    <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
                    <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
                </apply>
            </then>
            <elseif>
                <os family="unix" />
                <then>
                    <echo message="*** jpegtran NOT INSTALLED. SKIPPING OPTIMIZATION OF JPEGs." />
                    <echo message="*** Install jpegtran to enable jpeg optimization." />
                    <echo message="*** For instructions see 'Dependencies' at: http://html5boilerplate.com/docs/#Build-script#dependencies" />
                </then>
            </elseif>
        </if>
    </target>

    <target name="-git_commit" description="(PRIVATE) Commits the production theme / templates to git and creates a new tag. ">
        <echo message="Committing the built theme and templates to git. "/>
		<!-- exec executable="git" dir="${dir.theme_src}" failonerror="true">
			<arg line="add ." />
		</exec -->
		<exec executable="git" dir="${dir.theme_publish}" failonerror="true">
			<arg line="add -f -A ./" />
		</exec>
		<exec executable="git" dir="${dir.templates_publish}" failonerror="true">
			<arg line="add -f -A ./" />
		</exec>
		<exec executable="git" dir="./${dir.build}/config" failonerror="true">
			<arg line="add ${build.version.info}" />
		</exec>
		<exec executable="git" dir="${dir.templates_publish}" failonerror="true">
			<arg line="commit -m 'Build ${build.number}'" />
		</exec>
        <echo message="Committed files to git with message: Build ${build.number} "/>
    </target>

</project>